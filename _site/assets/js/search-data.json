{"0": {
    "doc": "Access Token",
    "title": "Access Token",
    "content": "The access token is a long random string that uniquely identifies a Pioneer within an app. The Access Token is the identifier that Applications use to communicate with the Pi Servers about a Pioneer. The Access Token is designed to protect the Pioneer’s information from unapproved access. This page assumes that you’ve read the Pi SDK page and have an understanding of how the Pi SDK and the Authenticate function work. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/accessToken/",
    "relUrl": "/docs/ImportantTopics/accessToken/"
  },"1": {
    "doc": "Access Token",
    "title": "Table of contents",
    "content": ". | Obtaining the Access Token . | Verifying the Access Token | . | Using the uid within your App . | Create Unique Database Records | No Pioneer Sign-In Required | . | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/accessToken/#table-of-contents",
    "relUrl": "/docs/ImportantTopics/accessToken/#table-of-contents"
  },"2": {
    "doc": "Access Token",
    "title": "Obtaining the Access Token",
    "content": "The Access Token is received by calling the Authenticate function of the Pi SDK. No specific scope is required to obtain Access Token as it will come included in all calls to the Authenticate Function. The Authenticate Function call will return an Access Token as a promise object in the format below: . AuthResults{ accessToken: string, user: { uid: string }} . Security Note: Do not save or use the accessToken or uid obtained in the Authentication call for purposes other than for display purposes because a malicious actor could pass a forged or corrupt access token. Instead pass the accessToken to your server side and verify it with the /me endpoint of the Pi App Platform APIs. Calling that API will be detailed later on. The Access Token is a dynamic string and will change at preset time intervals. Apps should not use the access token to create records or store information about a Pioneer. Instead, Apps should verify the access token which returns the correct uid of the Pioneer. To authenticate an access token, the App should pass the access token from its Frontend to its server side, and then call the Pi API /me endpoint. The uid is a static string which uniquely identifies a Pioneer to an app. The uid that comes with the Authenticate function is unverified and should be treated as not valid. Only the uid received from the /me endpoint of the Pi Platform APIs should be considered valid. Verifying the Access Token . Once the App has the Access token in its backend, then it should call the /me endpoint of the Platform APIs. This call will return the UserDTO with the uid and the username. If the access token is not valid for any reason, the call will return a 401 error. The first step to call the Pi API is to create the Authorization Header that is needed. A Bearer header is combined with the Access Token to validate the call. Authorization: Bearer &lt;Pioneer's access token obtained from App Frontend&gt; . An example with the required Header using Axios: . const PioneerAccessToken = accessToken_Obtained_from_App_Frontend; const header = { headers: { authorization: \"Bearer \" + PioneerAccessToken }}; axios.get(\"https://api.minepi.com/v2/me\", header); . The /me endpoint will return either the UserDTO, if the Access Token was valid, or a 401 Error Code if the token was fake or invalid. The returned UserDTO will look as follows: . Object{ user: { uid: string, username: string }} . The returned uid is static, and since it comes from the /me endpoint, it is the correct uid for the Pioneer and your App. Check out the next section for potential uses of the uid. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/accessToken/#obtaining-the-access-token",
    "relUrl": "/docs/ImportantTopics/accessToken/#obtaining-the-access-token"
  },"3": {
    "doc": "Access Token",
    "title": "Using the uid within your App",
    "content": "Create Unique Database Records . Using the verified uid which is obtained from the /me Pi Platform API endpoint, the app can create a unique record for each Pioneer within its DB. The uid is static and will not change; however, it is important to not use the uid that is returned by the Pi Platform SDK Authenticate function because it is not verified. Once the record is created using the uid, then it can be used to store any usage information such as purchases, progress within a game, etc. No Pioneer Sign-In Required . Everytime a Pioneer visits the app, the Pi Platform SDK Authenticate function will be called. This will return the Access Token, which needs to be verified. Once that token is verified the uid can be used to locate the Pioneer’s record within the app’s Database, which enables the app to personalize the Pioneer’s experience. For example, you have an app that offers videos that require purchase. Upon visiting the site within the Pi Browser, the Pioneer is first presented with a loading screen. Within a few seconds, when the app has received and verified the access token, then the homepage can load. Using the uid, the app now displays to the Pioneer all of the videos that they’ve purchased in the past. Included the uid is the username that can be displayed in a custom header on the app homepage so the Pioneer knows they are accessing their account. In addition, the app could use the Pioneer’s purchase history to recommend new videos. This is all done without the Pioneer signing in or remembering any passwords, making for a seamless user experience. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/accessToken/#using-the-uid-within-your-app",
    "relUrl": "/docs/ImportantTopics/accessToken/#using-the-uid-within-your-app"
  },"4": {
    "doc": "Brainstorm",
    "title": "Brainstorm",
    "content": ". Pi Brainstorm . The Pi Brainstorm application is designed to be the hub where Pioneers can collaborate and propose ideas for new apps that will build utility in the Pi Ecosystem. All Pioneers are able to view, propose, and apply to join existing projects within the Brainstorm app. Check it out by clicking on the Brainstorm tile within the Pi Browser. Listing your app on the Brainstorm brings you visibility to the Core Team and the community, and can potentially attract other community members with a variety of skills to apply to work on your team. In 2021, the Brainstorm app was also the hub for a network Hackathon that drew hundreds of participants from around the world. In the near future, we will also be hosting ongoing scalable online Hackathons as the Core Team is turning the Brainstorm app into an automatic scalable Hackathon system that involves blind peer-review processes. The ongoing Hackathon system is meant to further surface excellent community development and support the overall apps ecosystem. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/brainstorm/",
    "relUrl": "/docs/GettingStarted/brainstorm/"
  },"5": {
    "doc": "Steps to Build on Pi",
    "title": "Steps to Build on Pi",
    "content": "The pages in this section are intended to give you a overview of the steps required to start building on Pi and getting your application deployed. Follow the pages in their order to complete the required steps. ",
    "url": "http://localhost:4000/Guide/docs/checklists/",
    "relUrl": "/docs/checklists/"
  },"6": {
    "doc": "Community Support",
    "title": "Community Support",
    "content": "The Pi community is one of its kind. Having mined the Pi cryptocurrency through various contributions to the network and witnessed its development from the beginning, Pioneers are excited to offer support to its new members and help grow the Pi ecosystem. ",
    "url": "http://localhost:4000/Guide/docs/communitySupport/",
    "relUrl": "/docs/communitySupport/"
  },"7": {
    "doc": "Community Support",
    "title": "Discord",
    "content": "The fastest way to ask a question or get help is to join our Pi Ecosystem Discord server. Here, you will find many other developers who are also building on Pi and can assist you with any questions. The Pi Core Team is active in that server as well and can assist. To join the server take a brief developer test within our Brainstorm App, to access the application open the Pi Browser and click on the square logo for Brainstorm.Pi. ",
    "url": "http://localhost:4000/Guide/docs/communitySupport/#discord",
    "relUrl": "/docs/communitySupport/#discord"
  },"8": {
    "doc": "Community Support",
    "title": "Pi App Chat",
    "content": "You can also send a message in the Developer chat room on the Pi App for help from other fellow Pi community developers or chat moderators. To subscribe to the Developer chat room, select the “Chat” icon from the home screen of the Pi app (or the “chat.pi” tile on the Pi Browser’s welcome page) and then select the ➕ near the bottom right of the screen to find a list of the other chat rooms. From this list, you can subscribe to the Developer chat room by selecting the corresponding green “+” icon. Once you subscribe to it, that chat room will now be shown in your regular list of chat rooms. ",
    "url": "http://localhost:4000/Guide/docs/communitySupport/#pi-app-chat",
    "relUrl": "/docs/communitySupport/#pi-app-chat"
  },"9": {
    "doc": "Community Support",
    "title": "Twitter",
    "content": "Pi app’s home screen offers regular network updates, including any tech or ecosystem-related updates. Some of these updates are published on the Website blog as well. You can also follow us on Twitter for announcements. ",
    "url": "http://localhost:4000/Guide/docs/communitySupport/#twitter",
    "relUrl": "/docs/communitySupport/#twitter"
  },"10": {
    "doc": "Community Support",
    "title": "Other Platforms",
    "content": ". | Facebook: PiCoreTeam | Instagram: @pi_network | Telegram:PiAnnouncements | YouTube: PiCoreTeam | Medium: pinetwork-official | . ",
    "url": "http://localhost:4000/Guide/docs/communitySupport/#other-platforms",
    "relUrl": "/docs/communitySupport/#other-platforms"
  },"11": {
    "doc": "Creating Pi Account",
    "title": "Steps to Build on Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/createAnAccount/#steps-to-build-on-pi",
    "relUrl": "/docs/StepsToGetStarted/createAnAccount/#steps-to-build-on-pi"
  },"12": {
    "doc": "Creating Pi Account",
    "title": "Registering for an Account and Initial Setup",
    "content": "The following steps are required before launching an app in the Pi Ecosystem. Once these steps are completed a developer can choose their development path. | Download the Pi App . | Google Play Store Link | Apple App Store Link | . | Register for an account . | Use a friend’s invitation code to get 1 Pi | . | Download and Sign into the Pi Browser . | Watch our video tutorial to learn how to complete this | Google Play Store Link | Apple App Store Link | . | Verify Email Address . | Enter the Pi Mining App and click on the ‘☰’ in the top left corner. | Select the Profile option and confirm email address. | . | Create a Pi Wallet . | Create a Pi Wallet by heading to pi://wallet.pi within the Pi Browser. | You will be asked to confirm access by opening the wallet you created on the Developer Portal App Checklist. | Developer Portal App Checklist Step - 3 | . | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/createAnAccount/#registering-for-an-account-and-initial-setup",
    "relUrl": "/docs/StepsToGetStarted/createAnAccount/#registering-for-an-account-and-initial-setup"
  },"13": {
    "doc": "Creating Pi Account",
    "title": "Developer Portal App Checklist",
    "content": "The Pi Developer Portal is an application accesable within the Pi Browser which is home to all things building on Pi. For a more detailed explination see the Developer Portal page of this guide, or visit the App Checklist . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/createAnAccount/#developer-portal-app-checklist",
    "relUrl": "/docs/StepsToGetStarted/createAnAccount/#developer-portal-app-checklist"
  },"14": {
    "doc": "Creating Pi Account",
    "title": "Creating Pi Account",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/createAnAccount/",
    "relUrl": "/docs/StepsToGetStarted/createAnAccount/"
  },"15": {
    "doc": "Pi Demo App",
    "title": "Pi Bakery Demo App",
    "content": "The Pi Core Team has released a demo application which shows the integration of many of the features described throughout this guide. Developers are encouraged to clone this application and use it as a base to being your Pi application. To interact with a live version of the demo app head to pi://demo.pi within the Pi Browser. ",
    "url": "http://localhost:4000/Guide/docs/demoApp/#pi-bakery-demo-app",
    "relUrl": "/docs/demoApp/#pi-bakery-demo-app"
  },"16": {
    "doc": "Pi Demo App",
    "title": "Getting Started",
    "content": "Prior to setup you will need to register for a Pi account if you have not already done so. Head to Creating a Pi Account for the steps and links to complete this process. The instructions and the code for the demo application can be found in this Github repository. | Development is the initial setup and local development instance | Deployment is the steps to deploy the app to a server | . If you have questions or want to learn more about the implemenations within the demo app read the Flows document which has a breakdown of how each step was implemented. If following the Steps to Build on Pi or the Developer Portal Checklist: . | Initial Setup and Development . | Steps to Build on Pi - Creating a Pi Account and Initial Development | Developer Portal Checklist - Completing steps 1 thru 5 | . | Once the Demo App is started in development and a Pi Sandbox payment has been processed . | Steps to Build on Pi - Completed thru Initial Development | Developer Portal Checklist - Completed thru step 6 | . | Deploying the app to a server . | Steps to Build on Pi - Testnet Deployment | Developer Portal Checklist - Completing Steps 7 thru 9 | . | To Deploy a Mainnet App see the Launch on Mainnet page which details steps for this process | . ",
    "url": "http://localhost:4000/Guide/docs/demoApp/#getting-started",
    "relUrl": "/docs/demoApp/#getting-started"
  },"17": {
    "doc": "Pi Demo App",
    "title": "Pi Demo App",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/demoApp/",
    "relUrl": "/docs/demoApp/"
  },"18": {
    "doc": "Testnet Deployment",
    "title": "Steps to Build on Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/deploymentApp/#steps-to-build-on-pi",
    "relUrl": "/docs/StepsToGetStarted/deploymentApp/#steps-to-build-on-pi"
  },"19": {
    "doc": "Testnet Deployment",
    "title": "Deploy App on Pi Testnet",
    "content": ". | Deploy your app in a production environment . | Enter the desired Production URL. This is the URL the app will be accessible from within the pi browser | Developer Portal App Checklist Step - 7 | . | Validate Domain Ownership . | Prove ownership of your domain by adding the provided validation key to a .txt file named ‘validation-key.txt’ and place it on your hosting domain. Click on the step to get your validation key and URL to place the file | If using the Pi Demo App adding the validation string to your environment variables will automatically produce the needed page on your App for validation | Developer Portal App Checklist Step - 8 | . | Process a transaction on your app . | Visit the App at the verified URL within the Pi Browser to see and interact with it | Have your app process a User-to-App Pi Transaction to confirm you have successfully connected to the Pi Ecosystem | Users will be able to see and interact with your testnet application. All testnet payments use test-Pi | Developer Portal App Checklist Step - 9 | . | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/deploymentApp/#deploy-app-on-pi-testnet",
    "relUrl": "/docs/StepsToGetStarted/deploymentApp/#deploy-app-on-pi-testnet"
  },"20": {
    "doc": "Testnet Deployment",
    "title": "Testnet Deployment",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/deploymentApp/",
    "relUrl": "/docs/StepsToGetStarted/deploymentApp/"
  },"21": {
    "doc": "Developer Portal",
    "title": "Developer Portal",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/devPortal/",
    "relUrl": "/docs/GettingStarted/devPortal/"
  },"22": {
    "doc": "Developer Portal",
    "title": "Table of contents",
    "content": ". | What is it | Registering an App . | Creating a New App . | Select Network | . | . | App Dashboard . | App Checklist . | Note Step 8: Verify Domain Ownership | . | App Configuration . | Whitelist Users | Hosting Options: Self hosted or Hosted by Pi Core Team | Self hosted | Coming Soon - Hosted by Pi Core Team | Production URL | Development URL | . | API Key | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/devPortal/#table-of-contents",
    "relUrl": "/docs/GettingStarted/devPortal/#table-of-contents"
  },"23": {
    "doc": "Developer Portal",
    "title": "What is it",
    "content": "The Developer Portal is a Pi App that allows you to register as a developer and get developer credentials to create third-party Pi Apps – web apps that can be accessed through the Pi Browser. By declaring your app’s URL here, your app will be able to access the Pi App Platform and communicate with the Pi servers and the Pi Blockchain. Your app will be accessible directly from your own URL on the Pi Browser. You can put your app on any domain you want (including a .pi domain) and still have a fully functional Pi app. To access this feature head to develop.pi within the Pi Browser or open the Pi Browser and click on the develop.pi tile. If you have not previously acknowledge the Pi Developer Agreement you will get a popup alerting you to do so when you click on “Register an App”. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/devPortal/#what-is-it",
    "relUrl": "/docs/GettingStarted/devPortal/#what-is-it"
  },"24": {
    "doc": "Developer Portal",
    "title": "Registering an App",
    "content": "Prior to registering your first app you must verify your email within your Pi Mining App profile. This can be done by following the process listed on step 4 of the Getting Started Checklist. Creating a New App . When you open the developer portal, the homepage presents a brief introduction of the app and some important information. At the bottom of the page, you will see a “More Info” and a “Register a New App” button. If you have previously registered an app, you will be shown the My App page seen below. Click the “New App” button to start the registration process of your new app. The application creation form, includes the following steps: . | Add an App Name | . | If you have a Brainstorm project associated with your app, you should use the same name. | . | Description of the App | Select Network | . | See header below for more information | . In the future, we may create a bridge between Brainstorm and the Developer Portal, so that the whole app lifecycle is seamless. Select Network . This is the most important step and will determine what network your app connects to. Selecting Pi Mainnet will connect this application when accessed in the Pi Browser to the Pi Mainnet Blockchain. There are no Test-Pi transactions on Pi Mainnet and all transactions will be for real Pi. The Pi Testnet is the network that should be selected for testing purposes. All testnet transactions use Test-Pi will is a provided free of charge through the Pi Wallet. It is recommended that all projects begin by building a testnet application and after testing create a second application for the mainnet app. Important Note: To facilitate transactions the most recently accessed wallet address of the developer will be used as the project’s wallet address. All transactions for the network that the app points to will be processed using this address. If a developer has not created a wallet on the Pi Testnet then all transaction will fail until one is created. If you need to register for a wallet head to wallet.pi from within the Pi Browser to create a wallet. Prior to obtaining a Pi Mainnet Wallet it is required to complete Pi KYC a process that ensure each Pioneer is a real person. Due to this requirement it is suggested that a developer first launch their app on testnet where anyone can create a wallet. Once you app is registered the home page of the Developer Portal will appear as below. From this menu you can click on a project and that will load the app dashboard for that project. Dashboard Buttons . | Click the ? to read about the Developer Portal | The + will create a new app | The &#128101; is the reward feature, click here to enter you hackathon 2022 code. | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/devPortal/#registering-an-app",
    "relUrl": "/docs/GettingStarted/devPortal/#registering-an-app"
  },"25": {
    "doc": "Developer Portal",
    "title": "App Dashboard",
    "content": "The App Dashboard within the Developer Portal is all of the information relating to the app. From this dashboard a developer can make updates to the information. Toggle between the “App Overview” view and the “App Details” view to see all of the information relevant to the app. The screenshot below shows how an App Dashboard will appear within the Developer Portal. App Checklist . The Developer Portal App Checklist is a feature within in the Developer Portal which allows a developer to track their progress against what is needed to launch an application. The checklist has 9 steps and once completed a developer will having a fully functioning app that is deployed on the network that the app is pointed to. Note Step 8: Verify Domain Ownership . If you choose to host your application yourself, you will need to verify your domain ownership. This is meant to avoid developers creating apps from websites that they do not own or represent. For instance, you shouldn’t be able to impersonate the wikipedia.com domain name. In order to prove your ownership over the domain name, you will need to place a specific file at the root of your domain. The content of the file must match the content of the text field in the gray box listed on the Developer Portal. When you are done placing the file with the correct content at the root of your domain, you can click the “Verify domain” button. You will either see an error message with some debugging information, or the gray box will disappear and a green check mark will appear next to your domain url. Your domain ownership is now verified, and you can access your app through the Pi Browser by typing your app url in the address bar. App Configuration . The following fields can all be edited within the App Configuration feature that is accessed from the App’s dashboard. Whitelist Users . If registering a Pi Testnet connected App the developer has the option to grant access to all that visit the site or only to a select list of Pioneers. If you wish to allow anyone to test the application then leave this field blank. Otherwise, you can add up to 10 Pi Usernames for limiting access. These Pioneers can be changed, removed, or added to after registration. Hosting Options: Self hosted or Hosted by Pi Core Team . In the middle of the form, you will be asked whether you want the app to be self hosted or hosted by Pi Core Team. Self hosted . Self Hosted means that you are the one handling your applications server and web hosting. You have your own infrastructure, and you are the one taking care of daily operations of the hosting. If you select this option, you will be asked to enter the frontend URL of your application. See the Frontend Validation section below on how to validate this frontend URL. For a limited time try Digital Ocean hosting services and get a free $200 credit by using this link to sign up. Coming Soon - Hosted by Pi Core Team . The Pi Core Team will host your application — you will have no infrastructure management, no availability headaches, you simply manage the application’s code base. Although the self-hosting option is available for everyone, the Pi Core Team hosting option requires approval from the Pi Core Team. The Pi Core Team hosting of apps, if available for your app, is facilitated through the Pi App Engine. Finally, when you select this action, instead of a frontend url, you will be asked for a Gitlab username. This will be useful for the Pi Core Team to provide you with a Gitlab project, already integrated with the Pi Core Team’s deployment pipeline. Production URL . In this field you should put the URL that this App will be accessed with. If this is a Mainnet Application the URL should be the URL that you will give to Pioneers so they can access the application within Pi Browser. If a testnet application then this URL should be your testing URL which you may or may not give out. It is required to have an Https:// URL. Development URL . This is the URL for your locally-run development application (e.g. http://localhost:3000/). This will be used by the Sandbox to access your local application instance. See The Sandbox Flag section for more information on running your development application in the Sandbox. API Key . With the Pi App Platform comes the Pi APIs, where you can execute HTTP requests. For now this is only meant to handle user verification and payments but more abilities will be added in the future, such as creating chat conversations on the Pi Chat from your application. At the bottom of your project’s app dashboard, you can see a section called “API Keys”. You will need it to access the Pi Backend as an application developer. Keep it safe! Anyone with this key can pretend to be you. Note that accessing the public Pi blockchain does not require any API keys. You can simply produce transactions using your App’s private key and submit them directly to the blockchain through any public node (e.g., your own node, one of Pi Core Team’s nodes, or any other node that is running the “Blockchain API service”). Note, however, that during the current Enclosed Mainnet period, only Pi Core Team nodes operate the Pi Mainnet blockchain while any node can operate the Pi Testnet blockchain. For more details, please refer to the updated whitepaper chapter drafts here. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/devPortal/#app-dashboard",
    "relUrl": "/docs/GettingStarted/devPortal/#app-dashboard"
  },"26": {
    "doc": "Initial Development",
    "title": "Steps to Build on Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/developmentApp/#steps-to-build-on-pi",
    "relUrl": "/docs/StepsToGetStarted/developmentApp/#steps-to-build-on-pi"
  },"27": {
    "doc": "Initial Development",
    "title": "Initial Setup and Pi Sandbox Launch",
    "content": ". | Register your App . | Enter your App Name, App Description, and App’s Network | Once registered the network an app points to cannot be changed | See our Pi Mainnet vs Testnet Page for more on selecting a network | Developer Portal App Checklist Step - 1 | . | Configure App Hosting . | Either setup hosting through a third-party provider or host it on Pi Network’s Pi Engine. | Note: Hosting on Pi Network is coming soon | Developer Portal App Checklist Step - 2 | . | Read Documentation and Review Demo App . | Note: If you don’t want to start from scratch or if you are part of a hackathon, we recommend using our Pi Demo App as a boilerplate to get setup quickly | Visit pi://demo.pi within the Pi Browser to interact with the Demo App | Developer Portal App Checklist Step - 4 | . | Configure your App’s Development URL . | Enter the URL that the app will be accessed from on your local host, while running in the sandbox mode. | Note: This is not user facing nor accessable on the web | Developer Portal App Checklist Step - 5 | . | Run your development App in the sandbox . | First, set sandbox flag to “true” within your FE app code. Copy URL from dev portal and paste in your desktop browser. Enter the provided code in the utilities page of your Pi Mining App, found in the hamburger menu on the top left. Your browser will now be in sandbox mode and connected to your pi account | If using the Pi Demo App using yarn start on the frontend will automatically launch the app in the Pi Sandbox | Developer Portal App Checklist Step - 6 | . | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/developmentApp/#initial-setup-and-pi-sandbox-launch",
    "relUrl": "/docs/StepsToGetStarted/developmentApp/#initial-setup-and-pi-sandbox-launch"
  },"28": {
    "doc": "Initial Development",
    "title": "Initial Development",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/developmentApp/",
    "relUrl": "/docs/StepsToGetStarted/developmentApp/"
  },"29": {
    "doc": "Getting Started Checklist",
    "title": "Getting Started Checklist",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/"
  },"30": {
    "doc": "Getting Started Checklist",
    "title": "Table of contents",
    "content": ". | Registering for an Account and Initial Setup | Initial Setup and Pi Sandbox Launch | Deploy App on Pi Testnet | Launching on Pi Mainnet | Special Considerations | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#table-of-contents",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#table-of-contents"
  },"31": {
    "doc": "Getting Started Checklist",
    "title": "Registering for an Account and Initial Setup",
    "content": "The following steps are required before launching an app in the Pi Ecosystem. Once these steps are completed a developer can choose their development path. | Download the Pi App . | Google Play Store Link | Apple App Store Link | . | Register for an account . | Use a friend’s invitation code to get 1 Pi | . | Download and Sign into the Pi Browser . | Watch our video tutorial to learn how to complete this | Google Play Store Link | Apple App Store Link | . | Verify Email Address . | Enter the Pi Mining App and click on the ‘☰’ in the top left corner. | Select the Profile option and confirm email address. | . | Create a Pi Wallet . | Create a Pi Wallet by heading to pi://wallet.pi within the Pi Browser. | You will be asked to confirm access by opening the wallet you created on the Developer Portal App Checklist. | Developer Portal App Checklist Step - 3 | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#registering-for-an-account-and-initial-setup",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#registering-for-an-account-and-initial-setup"
  },"32": {
    "doc": "Getting Started Checklist",
    "title": "Initial Setup and Pi Sandbox Launch",
    "content": ". | Register your App . | Enter your App Name, App Description, and App’s Network | Once registered the network an app points to cannot be changed | See our Pi Mainnet vs Testnet Page for more on selecting a network | Developer Portal App Checklist Step - 1 | . | Configure App Hosting . | Either setup hosting through a third-party provider or host it on Pi Network’s Pi Engine. | Note: Hosting on Pi Network is coming soon | Developer Portal App Checklist Step - 2 | . | Read Documentation and Review Demo App . | Note: If you don’t want to start from scratch or if you are part of a hackathon, we recommend using our Pi Demo App as a boilerplate to get setup quickly | Visit pi://demo.pi within the Pi Browser to interact with the Demo App | Developer Portal App Checklist Step - 4 | . | Configure your App’s Development URL . | Enter the URL that the app will be accessed from on your local host, while running in the sandbox mode. | Note: This is not user facing nor accessable on the web | Developer Portal App Checklist Step - 5 | . | Run your development App in the sandbox . | First, set sandbox flag to “true” within your FE app code. Copy URL from dev portal and paste in your desktop browser. Enter the provided code in the utilities page of your Pi Mining App, found in the hamburger menu on the top left. Your browser will now be in sandbox mode and connected to your pi account | If using the Pi Demo App using yarn start on the frontend will automatically launch the app in the Pi Sandbox | Developer Portal App Checklist Step - 6 | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#initial-setup-and-pi-sandbox-launch",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#initial-setup-and-pi-sandbox-launch"
  },"33": {
    "doc": "Getting Started Checklist",
    "title": "Deploy App on Pi Testnet",
    "content": ". | Deploy your app in a production environment . | Enter the desired Production URL. This is the URL the app will be accessible from within the pi browser | Developer Portal App Checklist Step - 7 | . | Validate Domain Ownership . | Prove ownership of your domain by adding the provided validation key to a .txt file named ‘validation-key.txt’ and place it on your hosting domain. Click on the step to get your validation key and URL to place the file | If using the Pi Demo App adding the validation string to your environment variables will automatically produce the needed page on your App for validation | Developer Portal App Checklist Step - 8 | . | Process a transaction on your app . | Visit the App at the verified URL within the Pi Browser to see and interact with it | Have your app process a User-to-App Pi Transaction to confirm you have successfully connected to the Pi Ecosystem | Users will be able to see and interact with your testnet application. All testnet payments use test-Pi | Developer Portal App Checklist Step - 9 | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#deploy-app-on-pi-testnet",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#deploy-app-on-pi-testnet"
  },"34": {
    "doc": "Getting Started Checklist",
    "title": "Launching on Pi Mainnet",
    "content": ". | Obtain a Mainnet Wallet . | Pi KYC is required | Slots to apply are currently sent on an invitation basis | The wallet address of the Pioneer who registers the Developer Portal project will be used for all mainnet transfers associated with the app. | . | Create a Developer Portal Project directed at the Pi Mainnet . | Follow the previous steps to register an App and set the parameters | When registering your app in the Developer Portal select Pi Mainnet as the App’s Network | You cannot change a previously registered project to point to a different network than selected at the time of registration | . | Verify App URL . | URL cannot match the URL that is verified of another Developer Portal Project | If adjusting the URL of another Developer Portal Project then you must verify a new URL on the other project prior to reuse of that URL on another project. | . | Generate API Key . | API calls will fail if the API Key from a Testnet application is not updated | This will cause Payment failures | . | Launch App and complete a Pi payment . | It is recommended to have deployed a testnet app prior to launching on Mainnet to ensure payments function as intended | All Mainnet payments use Pi | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#launching-on-pi-mainnet",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#launching-on-pi-mainnet"
  },"35": {
    "doc": "Getting Started Checklist",
    "title": "Special Considerations",
    "content": ". | To process payments successfully on Pi Mainnet a wallet that has received a migration is required | Developers must maintain compliance with the Developer Terms of Service at all times | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/gettingStartedChecklist/#special-considerations",
    "relUrl": "/docs/GettingStarted/gettingStartedChecklist/#special-considerations"
  },"36": {
    "doc": "Important Topics",
    "title": "Important Topics",
    "content": "These sections cover many of the unique or special tools that the Pi App Platform offers to developers. Also covered are the blockchain topics that a developer should be familiar with. ",
    "url": "http://localhost:4000/Guide/docs/importantTopics/",
    "relUrl": "/docs/importantTopics/"
  },"37": {
    "doc": "Welcome",
    "title": "Pi New Developer Onboarding Guide",
    "content": "Welcome to Pi’s home of documentation for new developers. We are excited that you are interested in joining our Ecosystem. This guide is intended to introduce you to all the topics relevant to getting started with building on Pi. ",
    "url": "http://localhost:4000/Guide/#pi-new-developer-onboarding-guide",
    "relUrl": "/#pi-new-developer-onboarding-guide"
  },"38": {
    "doc": "Welcome",
    "title": "Pi’s Vision",
    "content": "Pi vision is to build the world’s most inclusive peer-to-peer ecosystem and online experience, fueled by Pi, the world’s most widely used cryptocurrency. Pi delivers on the true promise of blockchain: a massive, accessible, and open community powered by the world’s most widely distributed cryptocurrency that enables a robust ecosystem for members, merchants and developers alike. Founded in 2018 by a team of early innovators in blockchain and social computing, with PhDs from Stanford University, Pi Network is a utilities-based ecosystem for third-party apps on a mobile web platform, with widespread (rather than concentrated) token distribution. The blockchain platform offers a mobile-first mining approach, with low financial cost and a light environmental footprint within the crypto space. The community boasts an engaged 35M+ members in over 230 countries or regions. ",
    "url": "http://localhost:4000/Guide/#pis-vision",
    "relUrl": "/#pis-vision"
  },"39": {
    "doc": "Welcome",
    "title": "Pi Mobile Apps",
    "content": "There are two apps that users are required to download in order to join the ecosystem. The first is Pi App; this is Pi’s original mining app and the home of Pi’s unique mining mechanism. Downloading Pi App and creating an account allows anyone to participate in the ecosystem and mine Pi. Pi App is available for Android and iOS. The second is the Pi Browser, which is the mobile web platform for the Pi ecosystem. This is the window through which Pioneers (users and members of the Pi community) experience community developers’ applications. There is a more detailed explanation on the Pi Browser within the “Getting Started” category. Pi Browser is available for Android and iOS. Developers with Android phones that don’t have access to the Google Play Store can instead use the APKs for Pi App and Pi Browser. ",
    "url": "http://localhost:4000/Guide/#pi-mobile-apps",
    "relUrl": "/#pi-mobile-apps"
  },"40": {
    "doc": "Welcome",
    "title": "Documentation",
    "content": "There are two approaches to onboarding. The first option is to use this guide and move through its various categories. It will cover getting set up all the way through to processing payments. Head over to the Getting Started category and start with the Pi Browser Introduction. If you are looking for a less structured process, the second option is to go to our GitHub Repository and jump right into integrations. We advise against the second option because while it’s straightforward to integrate, you will miss out on learning the unique benefits and features that Pi has for developers. ",
    "url": "http://localhost:4000/Guide/#documentation",
    "relUrl": "/#documentation"
  },"41": {
    "doc": "Welcome",
    "title": "Whitepaper",
    "content": "The Original Pi Whitepaper was published on PiDay, March 14, 2019. While our original vision remains unchanged, the details of this whitepaper are not fully up to date. On December 28, 2021, along with the release of the Enclosed mainnet, we published three draft chapters of the Updated Whitepaper, detailing the Pi token token model and mining mechanism as well as the project’s roadmap. ",
    "url": "http://localhost:4000/Guide/#whitepaper",
    "relUrl": "/#whitepaper"
  },"42": {
    "doc": "Welcome",
    "title": "Developer Terms of Service",
    "content": "By accessing or using any part of the Pi Network Developer tools and resources, you agree that you are subject to and will comply with the Pi Network Developer Terms of Use. ",
    "url": "http://localhost:4000/Guide/#developer-terms-of-service",
    "relUrl": "/#developer-terms-of-service"
  },"43": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": " ",
    "url": "http://localhost:4000/Guide/",
    "relUrl": "/"
  },"44": {
    "doc": "Introduction to Pi",
    "title": "Getting Started",
    "content": "This section introduces (1) the Pi Browser (the home of the Pi ecosystem), (2) Developer Portal (the entrypoint into the ecosystem), and (3) the Pi App Platform (a set of tools to communicate with the Pi servers and the Pi blockchain). It is easy to build a mobile web app on the Pi ecosystem that allows instant access to a curious and passionate community with over 35 million members. Follow along for the steps required to start developing on Pi. ",
    "url": "http://localhost:4000/Guide/docs/introduction/#getting-started",
    "relUrl": "/docs/introduction/#getting-started"
  },"45": {
    "doc": "Introduction to Pi",
    "title": "Introduction to Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/introduction/",
    "relUrl": "/docs/introduction/"
  },"46": {
    "doc": "Launch on Mainnet",
    "title": "Steps to Build on Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/mainnetApp/#steps-to-build-on-pi",
    "relUrl": "/docs/StepsToGetStarted/mainnetApp/#steps-to-build-on-pi"
  },"47": {
    "doc": "Launch on Mainnet",
    "title": "Launching on Pi Mainnet",
    "content": ". | Obtain a Mainnet Wallet . | Pi KYC is required | Slots to apply are currently sent on an invitation basis | The wallet address of the Pioneer who registers the Developer Portal project will be used for all mainnet transfers associated with the app. | . | Create a Developer Portal Project directed at the Pi Mainnet . | Follow the previous steps to register an App and set the parameters | When registering your app in the Developer Portal select Pi Mainnet as the App’s Network | You cannot change a previously registered project to point to a different network than selected at the time of registration | . | Verify App URL . | URL cannot match the URL that is verified of another Developer Portal Project | If adjusting the URL of another Developer Portal Project then you must verify a new URL on the other project prior to reuse of that URL on another project. | . | Generate API Key . | API calls will fail if the API Key from a Testnet application is not updated | This will cause Payment failures | . | Launch App and complete a Pi payment . | It is recommended to have deployed a testnet app prior to launching on Mainnet to ensure payments function as intended | All Mainnet payments use Pi | . | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/mainnetApp/#launching-on-pi-mainnet",
    "relUrl": "/docs/StepsToGetStarted/mainnetApp/#launching-on-pi-mainnet"
  },"48": {
    "doc": "Launch on Mainnet",
    "title": "Special Considerations",
    "content": ". | To process payments successfully on Pi Mainnet a wallet that has received a migration is required | Developers must maintain compliance with the Developer Terms of Service at all times | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/mainnetApp/#special-considerations",
    "relUrl": "/docs/StepsToGetStarted/mainnetApp/#special-considerations"
  },"49": {
    "doc": "Launch on Mainnet",
    "title": "Launch on Mainnet",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/mainnetApp/",
    "relUrl": "/docs/StepsToGetStarted/mainnetApp/"
  },"50": {
    "doc": "Pi Mainnet vs Pi Testnet",
    "title": "Pi Mainnet vs Pi Testnet",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/mainnetVsTestnet/",
    "relUrl": "/docs/ImportantTopics/mainnetVsTestnet/"
  },"51": {
    "doc": "Pi Mainnet vs Pi Testnet",
    "title": "Table of contents",
    "content": ". | Pi Mainnet . | Enclosed Network Period . | Restrictions in the Enclosed Network Period | . | Open Network Period | . | Pi Testnet . | Sandbox (Local Environment) | . | Pi Wallet | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/mainnetVsTestnet/#table-of-contents",
    "relUrl": "/docs/ImportantTopics/mainnetVsTestnet/#table-of-contents"
  },"52": {
    "doc": "Pi Mainnet vs Pi Testnet",
    "title": "Pi Mainnet",
    "content": "The Pi Mainnet is a blockchain developed by Pi Network in which Pi is the native cryptocurrency. The mining mechanism that widely distributes the Pi cryptocurrency requires Pioneers to make many diverse forms of contributions to the network’s growth, security, utilities creation, decentralization, stability, and longevity, by which Pi is first deposited in the Pioneers’ mobile Pi accounts. The migration of these Pioneers’ Pi balances from their mobile Pi account to their Mainnet wallet started in June 2022 when the network passed one million KYC-verified Pioneers. KYC authentication of a Pioneer through a native, decentralized Pi KYC app precedes their balance migration to the Mainnet. In order to allow for sufficient time for millions of Pioneers to successfully complete their KYC verification and the subsequent Mainnet migration, create utilities in the Pi ecosystem, and the network’s continued efforts to iterate on the Pi ecosystem design, the Mainnet phase of the Roadmap has two periods as summarized below. For more details, please refer to the updated Roadmap chapter draft [linked here] (https://pinetwork-official.medium.com/pi-whitepaper-chapters-mainnet-token-model-mining-and-roadmap-19f4a6774e71) . | Firewalled Mainnet (i.e., the Enclosed Network), | Open Mainnet (i.e., the Open Network). | . Enclosed Network Period . This period began on December 28, 2021 when the Pi Mainnet blockchain launched. The Enclosed Network period means that the Mainnet is live but with a firewall that prevents any unwanted external connectivity. KYC’ed Pioneers will be able to use their Pi on the Mainnet freely in an enclosed environment within Pi Network. Pi apps will be able to switch from Testnet to Mainnet—to production mode for real Pi transactions. However, this period will not allow connectivity between the Pi blockchain and other blockchains. The Enclosed Network allows the Mainnet to run with production data and real Pi, which differs from Testnet. Data gathered during the Enclosed Network will help calibrate and tweak any configurations and formulae, if necessary, to ensure a stable and successful Open Network. Restrictions in the Enclosed Network Period . While transactions between Pi apps and Pioneers, and Pioneer-to-Pioneer, are allowed within Pi Network, the Enclosed Network will have in place the restrictions as listed below. These restrictions at this stage help enforce the enclosed nature of the network: . There will be no connectivity between Pi and other blockchains or crypto exchanges. Mainnet can only be accessed through the Pi Wallet and Pi apps on the Pi Browser. The Mainnet blockchain will be accessible to any computer on the internet but only through a firewall to enforce the above rules. There will only be Core Team Nodes on the Mainnet to ensure that the firewall is in place at all times. The Enclosed Network will support the growth of the Pi ecosystem. Thus, Pioneer-to-Pioneer transactions are possible through the Pi Wallet as KYC’ed Pioneers will be able to use the Pi Wallet to transact in Pi. Pioneers can also spend Pi in Pi apps on the Pi Browser, which can access the Mainnet through the Pi Apps SDK and the Pi Blockchain API. During the Enclosed Network period, an app on the Pi Browser can only use the Pi blockchain APIs whitelisted by the firewall to interact with the Mainnet. The following uses of Pioneer-to-Pioneer, Pioneer-to-App, and App-to-Pioneer transactions will be allowed: . | Exchange of Pi for goods and services through Pi Apps | Transfer of Pi between Pioneers for goods and services | . The following uses will be prohibited: . | Exchange of Pi for fiat currency | Exchange of Pi for other cryptocurrencies | Transfer for Pi for a future promise of fiat or other cryptocurrencies | . We will enforce the above restrictions by adding a firewall to the Mainnet and by exclusively running the Mainnet Nodes for this interim period. Community Nodes will continue to run on the Testnet in the Enclosed Network period. We will continue to implement interface and other changes to the Nodes in preparation for the Open Network period where the Community Nodes will be able to run on the Mainnet. The restrictions of the Network to keep it enclosed will be relaxed as it reaches the next period—Open Network. Open Network Period . The launch of the Open Network Period depends on the maturity of the Enclosed Network ecosystem and the progress of KYC. The Open Network period means that the firewall in the Enclosed Network period will be removed, allowing any external connectivity, e.g., to other networks, wallets, and anyone who wants to connect to Pi Mainnet. API calls will not be firewalled, and Pioneers will be able to run their own Pi Nodes and API services. Pioneers will have connectivity with other blockchains. Community Nodes can also run the Mainnet. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/mainnetVsTestnet/#pi-mainnet",
    "relUrl": "/docs/ImportantTopics/mainnetVsTestnet/#pi-mainnet"
  },"53": {
    "doc": "Pi Mainnet vs Pi Testnet",
    "title": "Pi Testnet",
    "content": "Pi Testnet allows for the testing of connectivity, performance, security, and scalability of the blockchain, and allows Pi app developers to develop the Pi apps before they deploy their app on the Pi Mainnet. Blockchain transactions are irreversible and cannot be refunded; therefore, it is important to have a place for developers and Pioneers to test transactions in a risk-free environment. The Pi Testnet is meant to mimic but is not a fork of the Pi Mainnet and the two blockchains may not be identical at a given point in time. The Pi Testnet uses Test Pi (or test-π), which is NOT REAL Pi. Test Pi is solely for the purpose of testing transactions on the Pi Testnet and contains NO VALUE. There is a faucet on the Pi Testnet that distributes Test Pi. If your wallet is running low on Test Pi, more can be requested. The Test-Pi balance in the wallet may be reset because Testnet will be periodically reset as part of the testing. Sandbox (Local Environment) . The Sandbox is a local testing environment that utilizes the Pi Testnet and a local instance of your app. This is for testing purposes only and should only be used during development. In order to use this feature, you must have a URL registered within the Developer Portal page of your app. To learn how to utilize the Sandbox and get it set up, go to the Pi SDK page and see the section titled “The Sandbox Flag.” . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/mainnetVsTestnet/#pi-testnet",
    "relUrl": "/docs/ImportantTopics/mainnetVsTestnet/#pi-testnet"
  },"54": {
    "doc": "Pi Mainnet vs Pi Testnet",
    "title": "Pi Wallet",
    "content": "The Pi Wallet can be utilized on both the Pi Mainnet and Pi Testnet. See the Pi Wallet page to learn more about the wallet. Instructions to switch between networks within the Pi Wallet are available on this page. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/mainnetVsTestnet/#pi-wallet",
    "relUrl": "/docs/ImportantTopics/mainnetVsTestnet/#pi-wallet"
  },"55": {
    "doc": "Master Checklist",
    "title": "Steps to Build on Pi",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#steps-to-build-on-pi",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#steps-to-build-on-pi"
  },"56": {
    "doc": "Master Checklist",
    "title": "Table of contents",
    "content": ". | Registering for an Account and Initial Setup | Initial Setup and Pi Sandbox Launch | Deploy App on Pi Testnet | Launching on Pi Mainnet | . Note: Click on the checklist header to see a more detailed explination of the steps. ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#table-of-contents",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#table-of-contents"
  },"57": {
    "doc": "Master Checklist",
    "title": "Registering for an Account and Initial Setup",
    "content": ". | Download the Pi App | Register for an account | Download and Sign into the Pi Browser | Verify Email Address | Create a Pi Wallet | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#registering-for-an-account-and-initial-setup",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#registering-for-an-account-and-initial-setup"
  },"58": {
    "doc": "Master Checklist",
    "title": "Initial Setup and Pi Sandbox Launch",
    "content": ". | Register your App | Configure App Hosting | Read Documentation and Review Demo App | Configure your App’s Development URL | Run your development App in the sandbox | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#initial-setup-and-pi-sandbox-launch",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#initial-setup-and-pi-sandbox-launch"
  },"59": {
    "doc": "Master Checklist",
    "title": "Deploy App on Pi Testnet",
    "content": ". | Deploy your app in a production environment | Validate Domain Ownership | Process a transaction on your app | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#deploy-app-on-pi-testnet",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#deploy-app-on-pi-testnet"
  },"60": {
    "doc": "Master Checklist",
    "title": "Launching on Pi Mainnet",
    "content": ". | Obtain a Mainnet Wallet | Create a Developer Portal Project directed at the Pi Mainnet | Verify App URL | Generate API Key | Launch App and complete a Pi payment | . ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/#launching-on-pi-mainnet",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/#launching-on-pi-mainnet"
  },"61": {
    "doc": "Master Checklist",
    "title": "Master Checklist",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/StepsToGetStarted/masterChecklist/",
    "relUrl": "/docs/StepsToGetStarted/masterChecklist/"
  },"62": {
    "doc": "Pi Payments",
    "title": "Pi Payments",
    "content": "This section covers all the relevant topics on creating, receiving, and sending payments of various types utilizing the Pi SDK. Pioneers utilize the Pi Wallet within Pi Browser and all documentation is related to the functionality associated with the Pi Wallet. Currently, Pioneer-to-App is the only payment method supported by the Pi SDK. Coming soon will be App-to-Pioneer payments and Pioneer-to-Pioneer payments initiated by an App. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/",
    "relUrl": "/docs/ImportantTopics/paymentFlow/"
  },"63": {
    "doc": "Pi App Platform APIs",
    "title": "Pi Platform APIs",
    "content": "The platform API grants access for Third Party Applications to communicate with the Pi Servers. Information can be requested about Pioneers or transactions that are related with your app deployed on the Pi App Platform, and the Pioneers that use your app. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#pi-platform-apis",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#pi-platform-apis"
  },"64": {
    "doc": "Pi App Platform APIs",
    "title": "Table of contents",
    "content": ". | Making API Calls . | Headers and Authorization Methods . | Access Token (Bearer Token) | Server API Key (Authorization Key) | . | API Reference . | /me | /payments . | Approve a Payment: | Complete a Payment: | Example Request | . | . | Resource Types . | PaymentDTO | . | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#table-of-contents",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#table-of-contents"
  },"65": {
    "doc": "Pi App Platform APIs",
    "title": "Making API Calls",
    "content": "Headers and Authorization Methods . This is how the Pi Servers will determine if the request is coming from an approved source. There are two formats depending on the endpoint being requested. Access Token (Bearer Token) . These API calls require that you provide a Pioneer’s access token to obtain the resource. They are generally related with a Pioneer’s data (e.g: /me). The token is returned from the Pi.Authenticate function of the Pi App Platform SDK. Those endpoints can be accessed using the following Authorization header: . Authorization: Bearer &lt;Pioneer's access token&gt; . Example Code: . const headers = { headers: { authorization: \"Bearer \" + { PioneerAccessToken } }}; axios.get(\"https://api.minepi.com/v2/me\", headers); . Server API Key (Authorization Key) . For various reasons, some API calls must be made from the backend or server of your app. To obtain an authorization key for API requests, please see the section of this guide on the Developer Portal. Those endpoints can be accessed using the following Authorization header: . Authorization: Key &lt;App Server API Key&gt; . Example code calling the /payments endpoint to obtain the information on a payment using the paymentID string: . const postingURL = `https://api.minepi.com/v2/payments/${ payment_id }`; const headers = { headers: { authorization: `key ${ APIKEY }` } }; axios.get(postingURL, null, headers); . API Reference . /me . Access a Pioneer’s resource and retrieve the Pioneer’s information. GET api.minepi.com/v2/me . Authorization method: Access token Response type: UserDTO . The request will fail (401 HTTP error code) if the token has been tampered with, as a tampered Access token would not belong to any Pioneer. /payments . Payments are covered in greater detail in the Pi Payment Flow section of this guide. If this is your first implementation of a Pi payment, it’s highly recommended to read that section in addition. It covers how Pi Payments are initiated and completed. This section only covers the API calls. The APIs for payments all have the base route /payments. It is important to not create payments using the Platform API. Use the client-side Javascript SDK for this purpose. Get Information: . GET api.minepi.com/v2/payments/{payment_id} . Authorization method: Server API Key Response type: PaymentDTO . Approve a Payment: . This marks a payment as approved within the Pi Server, enabling the Pioneer to approve and submit the transaction to the blockchain. The paymentID is obtained as a argument of the callback function onReadyForServerApproval from the Pi App Platform SDK. Read more on that function on the Pi App Platform SDK page. The paymentID should be passed from your client side to your server side for this call. Once the paymentID is on your server side then call the /approve endpoint using the paymentID to identify the payment: . POST api.minepi.com/v2/payments/{payment_id}/approve . Authorization method: Server API Key Response type: PaymentDTO . Here is the code to call the /approve endpoint and console.log the returned PaymentDTO . //Using a fake paymentID for demonstration, would be passed from client side const paymentID = eWXszS7lkfsRLHcrDRghLpDD5tHc; const payment_id = paymentID; //Passed from the Client Side const headers = { headers: { authorization: `key ${ APIKEY }` } }; //Stored in a .env file const postingURL = `https://api.minepi.com/v2/payments/${ payment_id }/approve`; let paymentDTO = await axios.post(postingURL, null,headers); console.log(paymentDTO) . Complete a Payment: . This marks a payment as completed by proving to the Pi Servers that your app has obtained the payment’s transaction ID (txID). This is the final step in a payment before the payment flow closes and the Pioneer returns to your app. The txID is obtained through the callback function onReadyForServerCompletion of the Pi App Platform SDK. Passing that txID to your server side and using it to call this endpoint will complete a payment. Don’t forget that . POST api.minepi.com/v2/payments/{payment_id}/complete . Authorization method: Server API Key Response type: PaymentDTO . Example Request . //Using a fake txID string for demonstration, would be passed from client side const txid = \"7a7ed20d3d72c365b9019baf8dc4c4e3cce4c08114d866e47ae157e3a796e9e7\" const payment_id = payment_id; //Passed from client side const tx_id = { txid: txid }; //In production passed from client side const headers ={headers:{ authorization: `key ${ APIKEY }` } }; //API stored in .env file const postingURL = `https://api.minepi.com/v2/payments/${ payment_id }/complete` let paymentDTO = await axios.post(postingURL, tx_id, headers) console.log(paymentDTO) . Resource Types . There are two resources currently returned by the Pi App Platform API: ‘AuthResults’’ and the PaymentDTO. In the future, there may be more. ####UserDTO . { \"uid\": string, // An app-specific Pioneer identifier \"username\": string, // The Pioneer's Pi username. Requires the `username` scope. } . PaymentDTO . { // Payment data: \"identifier\": string, // The payment identifier \"Pioneer_uid\": string, // The Pioneer's app-specific ID \"amount\": number, // The payment amount \"memo\": string, // A string provided by the developer, shown to the Pioneer \"metadata\": Object, // An object provided by the developer for their own usage \"to_address\": string, // The recipient address of the blockchain transaction \"created_at\": string, // The payment's creation timestamp // Status flags representing the current state of this payment \"status\": { \"developer_approved\": boolean, // Server-Side Approval \"transaction_verified\": boolean, // Blockchain transaction verified \"developer_completed\": boolean, // Server-Side Completion \"canceled\": boolean, // Canceled by the developer or by Pi Network \"Pioneer_cancelled\": boolean, // Canceled by the Pioneer }, // Blockchain transaction data: \"transaction\": null | { // This is null if no transaction has been made yet \"txid\": string, // The id of the blockchain transaction \"verified\": boolean, // True if the transaction matches the payment, false otherwise \"_link\": string, // A link to the operation on the Blockchain API }, }; . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#making-api-calls",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/#making-api-calls"
  },"66": {
    "doc": "Pi App Platform APIs",
    "title": "Pi App Platform APIs",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformAPIs/"
  },"67": {
    "doc": "Pi App Platform SDK",
    "title": "Pi App Platform SDK",
    "content": "The SDK is a developer’s method to interact with and obtain information from the Pi Servers. Developers can request information such as a Pioneer’s username or create a payment within Pi Browser. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/"
  },"68": {
    "doc": "Pi App Platform SDK",
    "title": "Table of contents",
    "content": ". | How to integrate the Pi SDK . | HTML Code | The Sandbox Flag . | Sandbox URL | Authorize Sandbox | . | Calling the Pi App Platform SDK within your App . | Window.Pi | . | . | Functions . | Authenticate . | Calling Authenticate | Pioneer Approval | Scopes . | username | Payments | . | Code Example | . | Create Payment | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#table-of-contents",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#table-of-contents"
  },"69": {
    "doc": "Pi App Platform SDK",
    "title": "How to integrate the Pi SDK",
    "content": "HTML Code . To use the Pi App Platform SDK, you need to add the SDK script tag to the frontend HTML code of your app’s home page. For most developers, this will be the index.html file that is used as the “/” route or home page. Next you need to call the init function to initialize the SDK. You need to specify the current version to ensure compatibility with future SDK releases. In the code example below, the first script tag calls the SDK while the second script tag calls the init function and declares the current version of the SDK. &lt;script src=\"https://sdk.minepi.com/pi-sdk.js\"&gt;&lt;/script&gt; &lt;script&gt; Pi.init({ version: \"2.0\" }) &lt;/script&gt; . As of August 2022, version 2.0 is the latest. The Sandbox Flag . If you want to operate the Pi App Platform SDK within a local environment, you can apply an optional tag titled sandbox. You must have configured a Development URL in the Developer Portal to use this feature. When testing within the Sandbox, the flag should be set to true. &lt;script src=\"https://sdk.minepi.com/pi-sdk.js\"&gt;&lt;/script&gt; &lt;script&gt; Pi.init({ version: \"2.0\", sandbox: true }) &lt;/script&gt; . You can set up your sandbox flag to match your development environment if you’re using a framework or a boilerplate that supports it. For example, most good Node boilerplates will set up the value of process.env.NODE_ENV to either “development” or “production”, and you could do something like: . &lt;script&gt; Pi.init({ version: \"2.0\", sandbox: &lt;%= process.env.NODE_ENV !== 'production' %&gt; }) &lt;/script&gt; . If you are running your app on a local development environment, you will want to configure your app to run the SDK in sandbox mode. Sandbox URL . To obtain the URL for your app within the Sandbox, open the Pi Browser and navigate to your app’s Developer Portal Page. Scroll to the bottom of the page and look for a section titled “Development URL.” . Copy and paste the URL found in that section into your prefered desktop browser and hit enter. You will be redirected to a page that looks similar to the image below, stating “Sign-in required” along with a random string of letters and numbers. Authorize Sandbox . You now need to authorize the sandbox to access your app within the Sandbox. This is required so that the Pi Servers know which Pioneer is accessing the sandbox. To do this on your mobile phone, open the Pi App. Within the sidebar menu, click on the “Pi Utilities’’ option. You will be presented the screen below, where you need to click the link for “Authorize Sandbox” at the bottom of the page. After clicking on the “Authorize Sandbox” link, you will be brought to the page below. Enter the code displayed on this page into the “Sign-in code” field of your desktop browser and click “confirm.” . The “Sign-In Required” page on the desktop browser should now redirect to the homepage of your app. You are now able to test the functionality of your app within a local environment. You will need Test-Pi in your Pi Wallet to make any transactions. For more information on payments, see the Pi Payments section. Calling the Pi App Platform SDK within your App . Window.Pi . In order to call the SDK, you must first initialize a new window directed towards Pi. This can be done using the follow code: . const Pi = window.Pi; . You may name the variable whatever you prefer. In this guide, we use Pi. Now that the window has been initialized, it is time to start utilizing the functions offered by the Pi App Platform SDK. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#how-to-integrate-the-pi-sdk",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#how-to-integrate-the-pi-sdk"
  },"70": {
    "doc": "Pi App Platform SDK",
    "title": "Functions",
    "content": "A more detailed explanation of the functionality and use cases for payments and access token are covered in depth within the Important Topics section. This section covers the basics of how to use two Authenticate and Payment functions. Authenticate . The Authenticate function will request the Pioneer’s scope and return them to the App in the form of a promise. Scopes are aspects of a Pioneer’s information which can be requested by an application. The information is obscured when possible to protect the Pioneer. The Authenticate function will always return the AuthResults which is the ‘UserDTO’ and accessToken even when an empty array is passed for scopes requested. The Access Token is a dynamic identifier which can be used in conjunction with the Pi App Platform APIs to verify a Pioneer. The Access Token will change at set time intervals and should not be used to create a unique record for a Pioneer. The uid is an app-local identifier for the Pioneer in that the uid is specific to that Pioneer and the app that requested it. Calling Authenticate . The Authenticate function takes two arguments, scopes and onIncompletePaymentFound. Scopes is an array of strings and onIncompletePaymentFound is a pre-coded callback function. Both arguments are implemented by the developer and explanations are below. Javascript code example that will call the authenticate function and log the return in the console: . const Pi = window.Pi; // Empty array for testing purposes: const scopes = [ ]; //Empty function that will log an incomplete payment if found //Developer needs to implement this callback function function onIncompletePaymentFound(payment) { console.log(payment); }; Pi.authenticate(scopes, onIncompletePaymentFound).then(function(auth){ console.log(auth) }).catch(function(error) { console.error(error); . The empty scopes array will return a promise object in Javascript: . AuthResults{ accessToken: string, user: UserDTO, } . Security Note: The Pioneer information obtained with this method, uid and accessToken, should not be saved to your database prior to verifying them and should only be used for presentation logic (e.g., displaying the Pioneer’s username). Pass them to your backend and then verify the Pioneer’s identity by requesting the /me endpoint of the Pi Platform APIs, using the accessToken obtained with this method. The return from the /me endpoint will contain the uid for the Pioneer or will result in an error code if the Access Token is not found or is invalid. Pi Platform APIs are covered in depth on the Pi App Platform APIs page of this guide. Pioneer Approval . When a Pioneer visits the app for the first time, they will be presented a popup asking for permission to share their information with the app. Each scope requested will appear to the Pioneer and the Pioneer can choose to “Allow” or “Cancel” the request. When deciding what scopes to request, it is best to limit to only the needed scopes for the core functionality of the app. Asking for too much information could result in Pioneers declining the request to share the information with your app. It can also raise the question of the intent behind the scopes request. The screen presented to Pioneers when visiting an app for the first time: . The app will not receive any information from Pi until the Pioneer approves this request. Scopes . username . The username scope will return a Pioneer’s username allowing the developer to integrate personalization into their app for the Pioneer. For example it can be used for displaying progress or achievements such as on a leaderboard for a game. To request the username, add the string ‘username’ into the scopes array variable. Note this will not remove the accessToken or the uid from being returned. const scopes = ['username']; . The returned promise in Javascript: . AuthResults{ accessToken: string, user: { uid: string, username: string } } . Payments . The payments string is needed to initialize Pi payments. This scope, if added, will not return any objects or information. To include it, see the code example below: . Code Example . // Requesting payment scope from the Pi App Platform SDK: const scopes = ['payments']; //Empty function that will log an incomplete payment if found //Developer needs to code this callback function function onIncompletePaymentFound(payment) { console.log(payment); }; Pi.authenticate(scopes, onIncompletePaymentFound).then(function(auth){ console.log(auth) }).catch(function(error) { console.error(error); . Now that you have implemented the payment scope, you can create payments. Create Payment . The Pi App Platform SDK function to create a payment takes two arguments paymentData and paymentCallback. Payment Data contains the variables of the payment and in Javascript it should be constructed using an Object {}. The format for the object is as follows. You can name the object as you prefer: . const paymentData = { amount: number, /* Pi Amount being Transacted */ memo: string, /* \"Any information that you want to add to payment\" */ metadata: object {}, /* { Special Information: 1234, ... } */ }; . The paymentCallbacks are a group of callback functions that will be utilized at various points throughout the payment flow. The callback will come from the Pi App Platform SDK and each function is prefilled with the arguments it will receive. When implementing these functions, the information should be passed to your server side to utilize the Pi App Platform APIs. It’s important to have them all implemented so that the app can handle errors. // Callbacks the developer needs to implement: const paymentCallbacks = { onReadyForServerApproval: function(paymentId) { /* ... */ }, onReadyForServerCompletion: function(paymentId, txid) { /* ... */ }, onCancel: function(paymentId) { /* ... */ }, onError: function(error, payment) { /* ... */ } }; . Here is a sample payment for 1 Pi using Javascript code and combining the variables from above. A .then function is used after the createPayment function to get the returned information and print it to the console and the .catch function receives any errors and prints them to the console. You don’t need to implement the error handling into your code but it makes troubleshooting much easier. const paymentData = { amount: 1, memo: 'This is a Test Payment', metadata: { InternalPaymentID: 1234 }, }; // Callbacks the developer needs to implement: const paymentCallbacks = { onReadyForServerApproval: function(paymentId) { /* ... */ }, onReadyForServerCompletion: function(paymentId, txid) { /* ... */ }, onCancel: function(paymentId) { /* ... */ }, onError: function(error, payment) { /* ... */ } }; Pi.createPayment(paymentData, paymentCallbacks).then(function(payment) { console.log(payment) }).catch(function(error) { console.error(error); }); } . The SDK is now integrated and you are ready to implement the Pi APIs. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#functions",
    "relUrl": "/docs/GettingStarted/piAppPlatform/piAppPlatformSDK/#functions"
  },"71": {
    "doc": "Pi Browser Introduction",
    "title": "Pi Browser Introduction",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piBrowserIntroduction/",
    "relUrl": "/docs/GettingStarted/piBrowserIntroduction/"
  },"72": {
    "doc": "Pi Browser Introduction",
    "title": "Table of contents",
    "content": ". | What is it | Technical Considerations . | Cookies or Session Tokens . | iOS | Android | . | . | . What is it . The Pi Browser provides a web experience in a decentralized world. In addition to supporting any Web2.0 applications, the Pi Browser also enables people to browse, interact and transact in decentralized applications — applications that integrate with blockchain technology — for a seamless and friendly user experience. The Pi Browser is an open Pi Apps platform because it enables developers to test and deploy the applications that integrate with Pi, Pi Wallet and other elements of the Pi tech stack. Developers can integrate the Pi App Platform SDK with the Testnet and conduct Test-Pi transactions for Pi Apps that allow developers to test their Pi apps on Testnet from their own domains. After successful tests, developers can transition to the Mainnet (Mainnet SDK will be released soon.) Additionally, the Pi Browser will have a directory of selected Pi Apps and its own DNS system to support a whole new class of .pi domains. Developers are able to host their apps on non-Pi domains if they choose. It is the only browser that can support Pi applications at the moment. As a general-purpose browser tool, however, it is still primitive. That is, the browser is currently in its beta version, and more changes and features are being developed. The Pi Browser now supports interactions with Apps that are the Pi Mainnet Blockchain. Technical Considerations . The Pi Browser utilizes iFrames to display App within the browser. This setup allows apps to be displayed on a wide array of devices without needing to create display logic for different devices or operating systems. Cookies or Session Tokens . iOS . Because iFrames are used, all apps displayed within Pi Browser will be considered Third Party Applications by the device. iOS natively disables cookies from all Third Party Applications by default, unless the device owner chooses to enable the cookies. Developers should expect that most Pioneers will have the cookies disabled. The Core Team is actively working on an alternative method for developers to have sessions. Android . Cookies or sessions can be utilized as expected. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piBrowserIntroduction/#table-of-contents",
    "relUrl": "/docs/GettingStarted/piBrowserIntroduction/#table-of-contents"
  },"73": {
    "doc": "Developer Payment Flow",
    "title": "Pi Payments",
    "content": "The platform API allows you to read and write data to the Pi Servers related to your app deployed on the Pi Apps platform and Pioneers using your app. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#pi-payments",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#pi-payments"
  },"74": {
    "doc": "Developer Payment Flow",
    "title": "Table of contents",
    "content": ". | What are Pi Payments | Payment Flow Diagram | Payment Flow Steps . | Phase I - Payment creation and Server-Side Approval | Phase II - Pioneer interaction and blockchain transaction | Phase III - Server-Side Completion | . | App Payment Security | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#table-of-contents",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#table-of-contents"
  },"75": {
    "doc": "Developer Payment Flow",
    "title": "What are Pi Payments",
    "content": "Payments are wrappers around blockchain transactions, which enable your app, the Pi blockchain, and the Pi Servers to be all synchronized when the Pioneer submits a blockchain transaction to pay for something in your app. They abstract away the technicalities involved when interacting with the Pi blockchain and enable you, the developer of the app, to have full confidence that the Pioneer has actually made the transaction. After a payment is created, it goes through 3 major phases: . | Payment creation and Server-Side Approval | Pioneer interaction and blockchain transaction | Server-Side Completion | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#what-are-pi-payments",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#what-are-pi-payments"
  },"76": {
    "doc": "Developer Payment Flow",
    "title": "Payment Flow Diagram",
    "content": "The diagram below outlines the steps involved in a Pioneer to App payment. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#payment-flow-diagram",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#payment-flow-diagram"
  },"77": {
    "doc": "Developer Payment Flow",
    "title": "Payment Flow Steps",
    "content": "Phase I - Payment creation and Server-Side Approval . | 1. createPayment: Your app's frontend creates the payment. The Payment Flow UI opens, but cannot be interacted with until the payment is approved by your server. | 2. onReadyForServerApproval: The JS SDK has obtained the payment identifier (PaymentID) and is passing it to your app for Server-Side approval. | . | Your app's frontend sends the PaymentID to your app's server. This implementation is your responsibility. | . | 3. Server-Side Approval: Your app's server approves the payment with Pi Servers through the /approve API call. This enables the Pioneer to submit the blockchain transaction (as explained in Phase II below). | . Phase II - Pioneer interaction and blockchain transaction . Steps 4a and 4b on the Pi Payment Flow Diagram. At this stage, the payment dialog becomes interactive and enables the Pioneer to (4a) confirm the transaction, sign it, and submit it to the Pi blockchain and (4b) the blockchain completes the transaction and returns the transaction information to the Pi App Platform. You do not have anything to do at this stage; everything is handled by the Pi Apps Platform and the Pi Wallet. After the blockchain transaction is submitted, the payment flow will not close. You need to acknowledge the payment through Server-Side completion before your app is visible to the Pioneer again (as explained in Phase III below). Phase III - Server-Side Completion . | 5. onReadyForServerCompletion: The Pi Servers will submit the Pioneer-approved transaction to the Blockchain. Then the Pi SDK passes the blockchain transaction identifier (TxID) to your app's frontend through the callback function onReadyForServerCompletion. You need this value for the Server-Side Completion flow which uses the TxID in the Pi API call. | . | Your app's frontend sends the TxID to your app's server. This implementation is your responsibility. | . | 6. Server-Side Completion: Your app's server acknowledges the payment with the Pi Servers through the /complete API endpoint. This enables you to check whether the blockchain transaction has actually happened, and to let the Pi Server know that you're aware of it. | 7. The payment flow closes. Your app is now visible to the Pioneer again. Your app's server and your app's frontend can exchange data, and update the app interface to show a confirmation screen to the Pioneer. | . | This implementation is your responsibility. | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#payment-flow-steps",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#payment-flow-steps"
  },"78": {
    "doc": "Developer Payment Flow",
    "title": "App Payment Security",
    "content": "Do not complete any payment within your app until the payment has completed and had a paymentDTO returned from the /complete API endpoint of the Server-Side Completion. A malicious user can run a hacked version of the SDK to pretend they have made a payment without making the actual payment. Therefore, if the API call to /payment/{ transaction_id }/complete returns a non-200 error code, do not mark the payment complete or paid with your app. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/#app-payment-security",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/#app-payment-security"
  },"79": {
    "doc": "Developer Payment Flow",
    "title": "Developer Payment Flow",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piPaymentFlow/",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piPaymentFlow/"
  },"80": {
    "doc": "Pi App Platform",
    "title": "Pi App Platform",
    "content": "The Pi App Platform encompasses the many tools that Pi offers for developers to integrate their apps into the Pi Ecosystem. These resources are needed to communicate with the Pi servers for functions such as facilitating Pi payments, verifying Pioneer information, and communicating with the Pi blockchain. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piPlatform/",
    "relUrl": "/docs/GettingStarted/piPlatform/"
  },"81": {
    "doc": "Pi Wallet Intro",
    "title": "Pi Wallet Introduction",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/#pi-wallet-introduction",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/#pi-wallet-introduction"
  },"82": {
    "doc": "Pi Wallet Intro",
    "title": "Table of contents",
    "content": ". | What is the Pi Wallet | Switch between Pi Mainnet and Pi Testnet | Creating a Pi Wallet . | Personal Wallet . | Testnet | . | Developer Wallet | Testnet Faucet | . | . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/#table-of-contents",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/#table-of-contents"
  },"83": {
    "doc": "Pi Wallet Intro",
    "title": "What is the Pi Wallet",
    "content": "To introduce the Pi Wallet, it’s worth briefly going over what a crypto wallet is. A crypto wallet is essentially a pair of “keys”: a public Address and a secret Passphrase (or a secret key). While the wallet address must be shared with others to transact on the blockchain, the passphrase must be kept secret as it is like a password to your bank account required to move any assets. In general, crypto wallets are categorized into custodial and non-custodial wallets with a difference in whether there is someone else helping you manage your passphrase/secret key or assets in the wallet. The Pi Wallet is a non-custodial wallet because the Pi servers never have access to your secret key or passphrase. To be more user-friendly and based on feedback from early testing Pioneers, the Pi Wallet secret key is represented by a list of more legible words called a ‘Passphrase’. The secret key can be dynamically derived from the passphrase so people only need to store a passphrase without actually saving a secret key. Using passphrases instead of the derived secret key for safekeeping reduces the chance of human mistakes in recording, and at the same time, achieves the same level of security as the secret key itself. In the mobile version of the Pi Wallet, if your phone has biometric authentication (fingerprint or face recognition), the passphrases can be safely stored on your phone and retrieved through fingerprint or FaceID. For more information and to learn about other features of the Pi Wallet watch our &lt;a href=”https://www.youtube.com/watch?v=q8R_-R8Wkls”&gt; Introductory Pi Wallet Video &lt;/a&gt; . The Pi Wallet can generate wallet addresses on multiple blockchains and hold different crypto assets on such blockchains using the same passphrase, but initially we are focusing only on Pi assets. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/#what-is-the-pi-wallet",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/#what-is-the-pi-wallet"
  },"84": {
    "doc": "Pi Wallet Intro",
    "title": "Switch between Pi Mainnet and Pi Testnet",
    "content": "The Pi Wallet has a feature to switch between the Pi Testnet and Mainnet Blockchains. Only one wallet will be needed for both testing an app on the Testnet and interacting on the Pi Mainnet. This limits the wallets needed, reducing the number of passphrases which must be secured. To change between the Pi Mainnet and Pi Testnet, utilize the dropdown menu within the Pi Wallet. Press on the down arrow that is inside the red box of the first image, and select the corresponding blockchain that you wish to interact with as seen on second image: . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/#switch-between-pi-mainnet-and-pi-testnet",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/#switch-between-pi-mainnet-and-pi-testnet"
  },"85": {
    "doc": "Pi Wallet Intro",
    "title": "Creating a Pi Wallet",
    "content": "Personal Wallet . To create a Pi Wallet, open the Pi Browser and click on the Pi Wallet tile to open the app. Once on the main page of the app, follow the steps to create a Pi Wallet. When creating a wallet, there is a minimal balance which must be maintained in order for the wallet to be valid. In addition, because there is a KYC component to the Pi Mainnet ,you will need to apply for Pi KYC before a Mainnet wallet can be created for you. In order to apply for Pi KYC, you must continue to mine and an invitation will be sent to you. Testnet . The Pi Testnet faucet will initiate the wallet on the Pi Testnet with 100 Test Pi for you to test transactions with. We want to emphasize that Test Pi (or test π) is NOT REAL Pi! Test Pi is solely for the purpose of testing transactions on the Pi Testnet and contains NO VALUE. The Test Pi balance in the wallet may be reset because Testnet will be periodically reset as part of the testing. You can also request additional Test Pi from the faucet when your balance gets low. Developer Wallet . This feature is coming soon and will be updated once it’s available. Testnet Faucet . On the Pi Testnet Blockchain, anyone can take advantage of the test Pi faucet. The purpose of the faucet is to supply, free of charge, imitation tokens which function the same as the real Pi tokens for the purpose of testing an app. This allows anyone to test interactions and transactions in a risk-free environment. Test Pi cannot be transferred to Mainnet and holds no value. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/#creating-a-pi-wallet",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/#creating-a-pi-wallet"
  },"86": {
    "doc": "Pi Wallet Intro",
    "title": "Pi Wallet Intro",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/piWallet/",
    "relUrl": "/docs/ImportantTopics/paymentFlow/piWallet/"
  },"87": {
    "doc": "Video Integration - Pioneer to App Payments",
    "title": "Video Integration of Pioneer to App Payments",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#video-integration-of-pioneer-to-app-payments",
    "relUrl": "/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#video-integration-of-pioneer-to-app-payments"
  },"88": {
    "doc": "Video Integration - Pioneer to App Payments",
    "title": "Table of contents",
    "content": ". | Captions . | Introduction | Create Payment | onReadyForServerApproval | onReadyForServerCompletion | onIncompletePaymentFound | Generate Server API Key | Callback Functions | Server Side | Testing | . | . Captions for the video can also be found on our Medium Blog Post . ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#table-of-contents",
    "relUrl": "/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#table-of-contents"
  },"89": {
    "doc": "Video Integration - Pioneer to App Payments",
    "title": "Captions",
    "content": "Introduction . Welcome back everyone. In the previous video, we saw how to use the Pi SDK, run your app in the sandbox and authenticate the user. In this video, I’m going to walk you through the overall payment process. The process I’m about to explain is at a very high level, but even with this, you’ll be able to understand what you need to do to create a payment. If you want to learn more about what’s actually happening behind the scene, please refer to our Pi Platform Documentation. Now let’s begin. Throughout the process, essentially 4 parties are involved. Your app, Your App Server, the Pi Servers and the Pi Blockchain. The most important point to remember is that all of them must be completely synchronized about the state of a payment to avoid any possible race conditions. If something goes wrong, a user may pay for an item that’s already given to someone else, or a user may pay for an item twice because the process gets interrupted. To avoid such cases, the Pi Core Team has implemented a protocol as a part of the Pi SDK and you don’t need to worry at all. Create Payment . With the Pi SDK, creating a payment in Pi Apps is very simple. Let’s have a look at the createPayment function. It takes 2 arguments, which are paymentData object and an object of callback functions. The paymentData object consists of three items. Amount to be paid, memo for users, and metadata for your own usage. If any of these are missing, you’ll get an error. onReadyForServerApproval . onReadyForServerApproval is a function that gets called when the payment id is ready. Using this function, you need to pass payment id and other relevant data to your app server. Then on your server, you should reserve an item for the user who’s about to buy it, and let the Pi server know that you’re ready to proceed. In other words, you need to make sure that your server is aware of the current payment through this function. onReadyForServerCompletion . onReadyForServerCompletion is a function that gets called after the blockchain transaction has been submitted to the Pi blockchain. Your job is again to pass any relevant data to your app server. On your server, you can verify the payment and deliver the item that was reserved for the user. In the end, you should complete the payment by letting the Pi server know that you have received the payment and delivered the item. The other 2 functions are onCancel and onError functions. As their names suggest, they are functions that will be invoked when the payment gets canceled and when an error occurs. onIncompletePaymentFound . Let’s not forget about the onIncompletePaymentFound function that we saw in the previous video. To remind you, this function is in charge of completing any incomplete payment. You might be wondering why you need to implement this function. There’s a chance that a payment process gets interrupted unexpectedly. A user might lose the internet connection, the app might crash or the server might not respond. If the payment process fails before a user pays, then it’s fine. The user just needs to start the process again. Of course, you need to clean up the stale orders on your server. But what if the user already paid and all of a sudden the process ends without being completed gracefully? That’s where this function comes in and plays the role. The Pi SDK will detect such payment when the user is authenticated and when a user tries to make a new payment, and if it finds an incomplete payment, it will request your app to complete the payment. Okay, so we are going to implement the functions in a minute. But there’s one more step you can’t forget, which is obtaining the API Key. Generate Server API Key . Assuming that you have registered your app on the developer portal, let’s generate the API Key, if you haven’t done yet. Select your app at the bottom, and if you tap on the “get api key” button, you can create a new key. Save the key before you close the window. Using this key, you can hit our endpoints and update the status of the Payment. Callback Functions . We are back to our demo app, and now we are going to implement the callback functions. For the sake of time, I have prepared the code snippet. Let’s fill this in together. We now all know what this is. What you want to do here is to call your server to hit our endpoint from your server. Keep in mind that this slash approve is just an arbitrary route I’m using as an example. Again, to complete the payment, you need to call your server to hit our endpoint. The last two functions are for your own usage. When the payment is canceled, mark it as canceled on your server as well. Also handle the error however you want. Server Side . Now let’s complete the backend. In this demo, I’m running the node server, but you can choose any backend you prefer. Also keep in mind that the actual implementation is up to you. I’m just demonstrating a rough example to help you understand the process. First, let’s see the approved route. When the payment is created, you need to reserve an item for the user, and map the paymentId to the current order. Then make sure to hit the approved endpoint to approve the payment. The same thing goes for the complete route as well. You can verify the payment if you want, deliver the item to the user, mark the order as paid and complete the payment by hitting the complete endpoint. We shouldn’t forget the incomplete route. Process the incomplete payment, and hit the complete endpoint. Although I’m skipping here, don’t forget to handle the cancel route as well. We are finally ready to create a payment. Testing . Now that the code is ready, let’s see the flow from the beginning. As soon as I tap on the button, the payment flow begins. I can see the next page only if the payment is approved from the app server. Then I can review the details and if I think it’s correct, I’ll use my passphrase to sign and submit the transaction to the Pi blockchain. Now the transaction is submitted, and we are waiting for the app server to complete the payment flow. When the app server finally completes the payment, I can see this result, and this is the end of the demo. Thanks for watching. ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#captions",
    "relUrl": "/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/#captions"
  },"90": {
    "doc": "Video Integration - Pioneer to App Payments",
    "title": "Video Integration - Pioneer to App Payments",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/",
    "relUrl": "/docs/ImportantTopics/paymentFlow/pioneerToAppPaymentVideo/"
  },"91": {
    "doc": "Pi SDK Video Integration Tutorial",
    "title": "Pi SDK Video Tutorial",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#pi-sdk-video-tutorial",
    "relUrl": "/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#pi-sdk-video-tutorial"
  },"92": {
    "doc": "Pi SDK Video Integration Tutorial",
    "title": "Table of contents",
    "content": ". | Video Guide to Integrating the Pi SDK | Captions . | Integrating the SDK | Developer Portal Parameters | Sandbox (Local Environment) | Authenticate Function | Scopes | onIncompletePaymentFound Callback Function | Authenticate Call Return | . | . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#table-of-contents",
    "relUrl": "/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#table-of-contents"
  },"93": {
    "doc": "Pi SDK Video Integration Tutorial",
    "title": "Video Guide to Integrating the Pi SDK",
    "content": "Captions for the video can also be found on our Medium Blog Post . ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#video-guide-to-integrating-the-pi-sdk",
    "relUrl": "/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#video-guide-to-integrating-the-pi-sdk"
  },"94": {
    "doc": "Pi SDK Video Integration Tutorial",
    "title": "Captions",
    "content": "Integrating the SDK . To use Pi SDK, you need to add an SDK script tag to your frontend. Then you need to call the init function to initialize the SDK. You need to specify the version to ensure compatibility with future SDK releases. As of now, the version 2.0 is the latest so we put 2.0 here, and the sandbox flag to be true, which I’m going to talk about in a minute. This sandbox flag is optional and lets you configure the SDK to run in the sandbox. It’s handy if you control this variable with the environment variable, but to be explicit, I’m setting it to true here. Developer Portal Parameters . Let’s go to the developer portal. I’m assuming you have registered your app on the portal as I did here. To load your app in the sandbox, you need to set the “development URL”. Right now it says “Not configured” so let’s edit this. This will typically be localhost with a custom port which depends on your development environment. Here I’m using localhost with 3003 port. Once you set the development URL, a sandbox url is generated. Open this url in the desktop browser, and you’ll see this white page with authorization code. If you’re running Pi Node, you are probably familiar with this process. Open your mobile app and tap on the Authorize sandbox link at the bottom of Pi Utilities page. And you need to type the authorization code and press confirm. When your sandbox environment is authorized, you’ll see your app within the sandbox environment, which is the page you saw earlier. Sandbox (Local Environment) . Now open the devtool of the browser. There’s a small context selector here. You can select localhost to get your app’s context. After you select localhost, if you type Pi in the console, you can access it. Of course, you’ll see some value to be null because the current user is not authenticated yet. Authenticate Function . Now that we can run our app in the sandbox, let’s take a look at the SDK shortly. The very first function you’ll encounter is the authenticate function. It takes an array of strings called scopes, and one callback function called onIncompletePaymentFound. Scopes . There are two available scopes, which are username and payments. For now, the scopes feature is still a work in progress. What that means is the authenticate function will consider both scopes as requested for now. Nonetheless, you should implement your app with only relevant scopes. Check our SDK reference hosted on our github repository for future updates. onIncompletePaymentFound Callback Function . onIncompletePaymentFound function handles an incomplete payment between your app and this user you’re authenticating. A payment is considered incomplete when you don’t submit the server-side completion API call. In this demo app, we are proposing an example usage, where the payment is sent to the app server to find the previous order and mark it as paid. More details about payment is available in the Payment video. For now, let’s just keep in mind that we need to pass a callback function that handles the incomplete payment from the server side. Authenticate Call Return . The authenticate function will return a promise, which looks something like this. The return value might change later, but what’s important is that you need to make sure to send it to the app server and store this information in your database. It’s also important to verify this by hitting /me endpoint from your server, because malicious users can pretend they are someone else. You can find more about the /me endpoint on our Pi-Platform-documentation. ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#captions",
    "relUrl": "/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/#captions"
  },"95": {
    "doc": "Pi SDK Video Integration Tutorial",
    "title": "Pi SDK Video Integration Tutorial",
    "content": " ",
    "url": "http://localhost:4000/Guide/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/",
    "relUrl": "/docs/GettingStarted/piAppPlatform/videoIntegrationPiSDK/"
  }
}
